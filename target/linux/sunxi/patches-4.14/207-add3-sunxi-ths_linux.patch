--- a/Documentation/devicetree/bindings/mfd/sun4i-gpadc.txt	2019-10-01 09:26:13.000000000 +0300
+++ b/Documentation/devicetree/bindings/mfd/sun4i-gpadc.txt	2019-03-12 10:34:30.222802201 +0200
@@ -4,12 +4,35 @@
 and sometimes as a touchscreen controller.
 
 Required properties:
-  - compatible: "allwinner,sun8i-a33-ths",
+  - compatible: must contain one of the following compatibles:
+		- "allwinner,sun8i-a33-ths"
+		- "allwinner,sun8i-h3-ths"
+		- "allwinner,sun8i-a83t-ths"
   - reg: mmio address range of the chip,
-  - #thermal-sensor-cells: shall be 0,
+  - #thermal-sensor-cells: shall be 0 or 1,
   - #io-channel-cells: shall be 0,
 
-Example:
+Required properties for the following compatibles:
+		- "allwinner,sun8i-h3-ths"
+		- "allwinner,sun8i-a83t-ths"
+  - interrupts: the sampling interrupt of the ADC,
+
+Required properties for the following compatibles:
+		- "allwinner,sun8i-h3-ths"
+  - clocks: the bus clock and the input clock of the ADC,
+  - clock-names: should be "bus" and "mod",
+  - resets: the bus reset of the ADC,
+
+Optional properties for the following compatibles:
+		- "allwinner,sun8i-h3-ths"
+  - nvmem-cells: A phandle to the calibration data provided by a nvmem device.
+		If unspecified default values shall be used. The size should
+		be 0x4 or 0x8, depending on the amount of CDATA registers.
+  - nvmem-cell-names: Should be "calibration".
+
+Details see: bindings/nvmem/nvmem.txt
+
+Example for A33:
 	ths: ths@01c25000 {
 		compatible = "allwinner,sun8i-a33-ths";
 		reg = <0x01c25000 0x100>;
@@ -17,6 +40,27 @@
 		#io-channel-cells = <0>;
 	};
 
+Example for H3:
+	ths: thermal-sensor@1c25000 {
+		compatible = "allwinner,sun8i-h3-ths";
+		reg = <0x01c25000 0x400>;
+		clocks = <&ccu CLK_BUS_THS>, <&ccu CLK_THS>;
+		clock-names = "bus", "mod";
+		resets = <&ccu RST_BUS_THS>;
+		interrupts = <GIC_SPI 31 IRQ_TYPE_LEVEL_HIGH>;
+		#thermal-sensor-cells = <0>;
+		#io-channel-cells = <0>;
+	};
+
+Example for A83T:
+	ths: thermal-sensor@1f04000 {
+		compatible = "allwinner,sun8i-a83t-ths";
+		reg = <0x01f04000 0x100>;
+		interrupts = <GIC_SPI 41 IRQ_TYPE_LEVEL_HIGH>;
+		#thermal-sensor-cells = <1>;
+		#io-channel-cells = <0>;
+	};
+
 sun4i, sun5i and sun6i SoCs are also supported via the older binding:
 
 sun4i resistive touchscreen controller
--- a/drivers/thermal/Kconfig	2019-10-01 09:26:13.000000000 +0300
+++ b/drivers/thermal/Kconfig	2019-03-12 10:34:36.414619070 +0200
@@ -407,11 +415,29 @@
 	  Enable this option if you want to have support for thermal management
 	  controller present in Mediatek SoCs
 
+config SUN50I_H6_THS
+	tristate "Thermal sensor driver for Allwinner H6"
+	depends on ARCH_SUNXI || COMPILE_TEST
+	depends on HAS_IOMEM
+	depends on NVMEM
+	depends on OF
+	depends on RESET_CONTROLLER
+	help
+	  Enable this option if you want to have support for thermal reporting
+	  on Allwinner H6.
+
 menu "Broadcom thermal drivers"
 depends on ARCH_BCM || ARCH_BCM2835 || COMPILE_TEST
 source "drivers/thermal/broadcom/Kconfig"
 endmenu
 
+config SUN8I_THS
+	tristate "Thermal sensor driver for Allwinner H3"
+	depends on MACH_SUN8I || (ARM64 && ARCH_SUNXI)
+	depends on OF
+	help
+	  Enable this to support thermal reporting on some newer Allwinner SoCs.
+
 menu "Texas Instruments thermal drivers"
 depends on ARCH_HAS_BANDGAP || COMPILE_TEST
 depends on HAS_IOMEM
--- a/drivers/thermal/Makefile	2019-10-01 09:26:13.000000000 +0300
+++ b/drivers/thermal/Makefile	2019-03-12 10:34:36.414619070 +0200
@@ -58,6 +58,8 @@
 obj-$(CONFIG_TEGRA_SOCTHERM)	+= tegra/
 obj-$(CONFIG_HISI_THERMAL)     += hisi_thermal.o
 obj-$(CONFIG_MTK_THERMAL)	+= mtk_thermal.o
+obj-$(CONFIG_SUN50I_H6_THS)	+= sun50i_h6_ths.o
 obj-$(CONFIG_GENERIC_ADC_THERMAL)	+= thermal-generic-adc.o
 obj-$(CONFIG_ZX2967_THERMAL)	+= zx2967_thermal.o
 obj-$(CONFIG_UNIPHIER_THERMAL)	+= uniphier_thermal.o
+obj-$(CONFIG_SUN8I_THS)		+= sun8i_ths.o
--- a/drivers/thermal/sun50i_h6_ths.c	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/thermal/sun50i_h6_ths.c	2019-03-12 10:34:36.414619070 +0200
@@ -0,0 +1,365 @@
+/*
+ * Thermal sensor driver for Allwinner H6
+ *
+ * Copyright (C) 2018 Icenowy Zheng
+ *
+ * Based on the work of Ond≈ôej Jirman
+ * Based on the work of Josef Gajdusek <atx@atx.name>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/clk.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/nvmem-consumer.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/reset.h>
+#include <linux/slab.h>
+#include <linux/thermal.h>
+#include <linux/printk.h>
+
+#define THS_H6_MAX_SENSOR_NUM	4
+
+#define THS_H6_CTRL0		0x00
+#define THS_H6_CTRL2		0x04
+#define THS_H6_PER		0x08
+#define THS_H6_DATA_INT_CTRL	0x10
+#define THS_H6_DATA_INT_STAT	0x20
+#define THS_H6_FILTER		0x30
+#define THS_H6_CDATA(n)		(0xa0 + 4 * (n))
+#define THS_H6_DATA(n)		(0xc0 + 4 * (n))
+
+#define THS_H6_CTRL0_SENSOR_ACQ0(x)	((x) << 16)
+#define THS_H6_CTRL2_SENSE_EN(n)	BIT(0 + (n))
+#define THS_H6_PER_THERMAL_PER(x)	((x) << 12)
+#define THS_H6_INT_CTRL_DATA_IRQ_EN(n)	BIT(0 + (n))
+#define THS_H6_STAT_DATA_IRQ_STS(n)	BIT(0 + (n))
+#define THS_H6_FILTER_TYPE(x)		((x) << 0)
+#define THS_H6_FILTER_EN		BIT(2)
+
+#define THS_H6_CLK_IN		240000000 /* Hz */
+#define THS_H6_DATA_PERIOD	10 /* ms */
+
+#define THS_H6_FILTER_TYPE_VALUE	2 /* average over 2^(n+1) samples */
+#define THS_H6_FILTER_DIV		(1 << (THS_H6_FILTER_TYPE_VALUE + 1))
+#define THS_H6_INT_CTRL_THERMAL_PER_VALUE \
+	(THS_H6_DATA_PERIOD * (THS_H6_CLK_IN / 1000) / THS_H6_FILTER_DIV / 4096 - 1)
+#define THS_H6_CTRL0_SENSOR_ACQ0_VALUE	0x1df /* 20us */
+#define THS_H6_CTRL0_UNK		0x0000002f
+
+#define THS_H6_CAL_FT_TEMP_MASK		0x0fff
+#define THS_H6_CAL_FT_TEMP_DEVIATION_EN	0x3000
+#define THS_H6_CAL_DEFAULT		0x800
+#define THS_H6_CAL_VAL_MASK		0xfff
+
+struct sun50i_h6_ths_data;
+
+struct sun50i_h6_ths_sensor {
+	struct sun50i_h6_ths_data *data;
+	int id;
+	struct thermal_zone_device *tzd;
+	u32 val;
+};
+
+struct sun50i_h6_ths_cfg {
+	int sensor_num;
+	int (*calc_temp)(u32 val);
+};
+
+struct sun50i_h6_ths_data {
+	struct reset_control *reset;
+	struct clk *busclk;
+	void __iomem *regs;
+	const struct sun50i_h6_ths_cfg *cfg;
+	struct nvmem_cell *calcell;
+	struct sun50i_h6_ths_sensor sensors[THS_H6_MAX_SENSOR_NUM];
+};
+
+static int sun50i_h6_ths_calc_temp(u32 val)
+{
+	return (187744 - (int)((val * 1000000) / 14882));
+}
+
+static u16 sun50i_h6_ths_recalc_reg(u32 temp)
+{
+	return (u16)(2794 - temp * 14882 / 1000000);
+}
+
+static int sun50i_h6_ths_get_temp(void *_data, int *out)
+{
+	struct sun50i_h6_ths_sensor *sensor = _data;
+
+	if (sensor->val == 0)
+		return -EBUSY;
+
+	/* Formula and parameters from the Allwinner 3.4 kernel */
+	*out = sensor->data->cfg->calc_temp(sensor->val);
+	return 0;
+}
+
+static irqreturn_t sun50i_h6_ths_irq_thread(int irq, void *_data)
+{
+	struct sun50i_h6_ths_data *data = _data;
+	int i;
+
+	for (i = 0; i < data->cfg->sensor_num; i++) {
+		if (!(readl(data->regs + THS_H6_DATA_INT_STAT) &
+		      THS_H6_STAT_DATA_IRQ_STS(i)))
+			continue;
+
+		writel(THS_H6_STAT_DATA_IRQ_STS(i),
+		       data->regs + THS_H6_DATA_INT_STAT);
+
+		data->sensors[i].val = readl(data->regs + THS_H6_DATA(i));
+		if (data->sensors[i].val)
+			thermal_zone_device_update(data->sensors[i].tzd,
+						   THERMAL_EVENT_TEMP_SAMPLE);
+	}
+
+	return IRQ_HANDLED;
+}
+
+static void sun50i_h6_ths_init(struct sun50i_h6_ths_data *data)
+{
+	u32 val;
+	int i;
+
+	writel(THS_H6_CTRL0_SENSOR_ACQ0(THS_H6_CTRL0_SENSOR_ACQ0_VALUE) |
+	       THS_H6_CTRL0_UNK, data->regs + THS_H6_CTRL0);
+	writel(THS_H6_FILTER_EN | THS_H6_FILTER_TYPE(THS_H6_FILTER_TYPE_VALUE),
+	       data->regs + THS_H6_FILTER);
+
+	val = 0;
+	for (i = 0; i < data->cfg->sensor_num; i++)
+		val |= THS_H6_CTRL2_SENSE_EN(i);
+	writel(val, data->regs + THS_H6_CTRL2);
+
+	val = THS_H6_PER_THERMAL_PER(THS_H6_INT_CTRL_THERMAL_PER_VALUE);
+	writel(val, data->regs + THS_H6_PER);
+
+	val = 0;
+	for (i = 0; i < data->cfg->sensor_num; i++)
+		val |= THS_H6_INT_CTRL_DATA_IRQ_EN(i);
+	writel(val, data->regs + THS_H6_DATA_INT_CTRL);
+}
+
+static const struct thermal_zone_of_device_ops sun50i_h6_ths_thermal_ops = {
+	.get_temp = sun50i_h6_ths_get_temp,
+};
+
+static int sun50i_h6_ths_calibrate(struct sun50i_h6_ths_data *data)
+{
+	u16 *caldata;
+	size_t callen;
+	int i;
+	int ft_temp;
+	s16 ft_temp_orig_reg, diff, cal_val;
+	u32 reg_val;
+
+	caldata = nvmem_cell_read(data->calcell, &callen);
+	if (IS_ERR(caldata))
+		return PTR_ERR(caldata);
+
+	if (callen < 2 + 2 * data->cfg->sensor_num)
+		return -EINVAL;
+
+	if (!caldata[0])
+		return -EINVAL;
+
+	/*
+	 * The calbration data on H6 is stored as temperature-value
+	 * pair when being filled at factory test stage.
+	 * The unit of stored FT temperature is 0.1 degreee celusis.
+	 */
+	ft_temp = (caldata[0] & THS_H6_CAL_FT_TEMP_MASK) * 100;
+	ft_temp_orig_reg = sun50i_h6_ths_recalc_reg(ft_temp);
+
+	for (i = 0; i < data->cfg->sensor_num; i++)
+	{
+		diff = (ft_temp_orig_reg - (s16)caldata[1 + i]);
+		cal_val = THS_H6_CAL_DEFAULT - diff;
+
+		if (cal_val & ~THS_H6_CAL_VAL_MASK) {
+			pr_warn("Faulty thermal sensor %d calibration value, beyond the valid range.\n", i);
+			continue;
+		}
+
+		if (i % 2) {
+			reg_val = readl(data->regs + THS_H6_CDATA(i / 2));
+			reg_val &= 0xffff;
+			reg_val |= cal_val << 16;
+			writel(reg_val, data->regs + THS_H6_CDATA(i / 2));
+		} else {
+			writel(cal_val, data->regs + THS_H6_CDATA(i / 2));
+		}
+	}
+
+	kfree(caldata);
+	return 0;
+}
+
+static int sun50i_h6_ths_probe(struct platform_device *pdev)
+{
+	struct sun50i_h6_ths_data *data;
+	struct resource *res;
+	int ret, irq, i;
+
+	data = devm_kzalloc(&pdev->dev, sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	data->cfg = of_device_get_match_data(&pdev->dev);
+	if (!data->cfg)
+		return -EINVAL;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(&pdev->dev, "no memory resources defined\n");
+		return -EINVAL;
+	}
+
+	data->regs = devm_ioremap_resource(&pdev->dev, res);
+	if (IS_ERR(data->regs)) {
+		ret = PTR_ERR(data->regs);
+		dev_err(&pdev->dev, "failed to ioremap THS registers: %d\n", ret);
+		return ret;
+	}
+
+	irq = platform_get_irq(pdev, 0);
+	if (irq < 0) {
+		dev_err(&pdev->dev, "failed to get IRQ: %d\n", irq);
+		return irq;
+	}
+
+	ret = devm_request_threaded_irq(&pdev->dev, irq, NULL,
+					sun50i_h6_ths_irq_thread, IRQF_ONESHOT,
+					dev_name(&pdev->dev), data);
+	if (ret)
+		return ret;
+
+	data->busclk = devm_clk_get(&pdev->dev, "bus");
+	if (IS_ERR(data->busclk)) {
+		ret = PTR_ERR(data->busclk);
+		dev_err(&pdev->dev, "failed to get ahb clk: %d\n", ret);
+		return ret;
+	}
+
+	data->reset = devm_reset_control_get(&pdev->dev, NULL);
+	if (IS_ERR(data->reset)) {
+		ret = PTR_ERR(data->reset);
+		dev_err(&pdev->dev, "failed to get reset: %d\n", ret);
+		return ret;
+	}
+
+	ret = reset_control_deassert(data->reset);
+	if (ret) {
+		dev_err(&pdev->dev, "reset deassert failed: %d\n", ret);
+		return ret;
+	}
+
+	ret = clk_prepare_enable(data->busclk);
+	if (ret) {
+		dev_err(&pdev->dev, "failed to enable bus clk: %d\n", ret);
+		goto err_assert_reset;
+	}
+
+	data->calcell = devm_nvmem_cell_get(&pdev->dev, "calibration");
+	if (IS_ERR(data->calcell)) {
+		if (PTR_ERR(data->calcell) == -EPROBE_DEFER) {
+			ret = PTR_ERR(data->calcell);
+			goto err_disable_bus;
+		}
+		/*
+		* Even if the external calibration data stored in eFUSE is
+		* not accessible, the THS hardware can still work, although
+		* the data won't be so accurate.
+		* The default value of calibration register is 0x800 for
+		* every sensor, and the calibration value is usually 0x7xx
+		* or 0x8xx, so they won't be away from the default value
+		* for a lot.
+		* So here we do not return if the calibartion data is not
+		* available, except the probe needs deferring.
+		*/
+	} else {
+		ret = sun50i_h6_ths_calibrate(data);
+		if (ret) {
+			/* Revert calibrating */
+			for (i = 0; i < data->cfg->sensor_num; i += 2) {
+				writew(THS_H6_CAL_DEFAULT,
+				       data->regs + THS_H6_CDATA(i / 2));
+			}
+		}
+	}
+
+	for (i = 0; i < data->cfg->sensor_num; i++) {
+		data->sensors[i].data = data;
+		data->sensors[i].id = i;
+		data->sensors[i].tzd =
+			devm_thermal_zone_of_sensor_register(&pdev->dev,
+				i, &data->sensors[i], &sun50i_h6_ths_thermal_ops);
+		if (IS_ERR(data->sensors[i].tzd)) {
+			ret = PTR_ERR(data->sensors[i].tzd);
+			dev_err(&pdev->dev,
+				"failed to register thermal zone %d: %d\n",
+				i, ret);
+			goto err_disable_bus;
+		}
+	}
+
+	sun50i_h6_ths_init(data);
+
+	platform_set_drvdata(pdev, data);
+	return 0;
+
+err_disable_bus:
+	clk_disable_unprepare(data->busclk);
+err_assert_reset:
+	reset_control_assert(data->reset);
+	return ret;
+}
+
+static int sun50i_h6_ths_remove(struct platform_device *pdev)
+{
+	struct sun50i_h6_ths_data *data = platform_get_drvdata(pdev);
+
+	reset_control_assert(data->reset);
+	clk_disable_unprepare(data->busclk);
+	return 0;
+}
+
+static const struct sun50i_h6_ths_cfg sun50i_h6_ths_cfg = {
+	.sensor_num = 2,
+	.calc_temp = sun50i_h6_ths_calc_temp,
+};
+
+static const struct of_device_id sun50i_h6_ths_id_table[] = {
+	{ .compatible = "allwinner,sun50i-h6-ths", .data = &sun50i_h6_ths_cfg },
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(of, sun50i_h6_ths_id_table);
+
+static struct platform_driver sun50i_h6_ths_driver = {
+	.probe = sun50i_h6_ths_probe,
+	.remove = sun50i_h6_ths_remove,
+	.driver = {
+		.name = "sun50i_h6_ths",
+		.of_match_table = sun50i_h6_ths_id_table,
+	},
+};
+
+module_platform_driver(sun50i_h6_ths_driver);
+
+MODULE_AUTHOR("Icenowy Zheng <icenowy@aosc.io>");
+MODULE_DESCRIPTION("Thermal sensor driver for Allwinner H6");
+MODULE_LICENSE("GPL v2");
--- a/drivers/thermal/sun8i_ths.c	1970-01-01 03:00:00.000000000 +0300
+++ b/drivers/thermal/sun8i_ths.c	2019-03-12 00:33:20.246514437 +0200
@@ -0,0 +1,416 @@
+/*
+ * Thermal sensor driver for Allwinner SUN8I SoC
+ *
+ * Copyright (C) 2016 Ond≈ôej Jirman
+ * Based on the work of Josef Gajdusek <atx@atx.name>
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/clk.h>
+#include <linux/interrupt.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/of_device.h>
+#include <linux/platform_device.h>
+#include <linux/reset.h>
+#include <linux/slab.h>
+#include <linux/thermal.h>
+#include <linux/printk.h>
+
+#define THS_SUN8I_CTRL0		0x00
+#define THS_SUN8I_CTRL2		0x40
+#define THS_SUN8I_INT_CTRL	0x44
+#define THS_SUN8I_STAT		0x48
+#define THS_SUN8I_FILTER	0x70
+#define THS_SUN8I_CDATA01	0x74
+#define THS_SUN8I_CDATA2	0x78
+#define THS_SUN8I_DATA0		0x80
+#define THS_SUN8I_DATA1		0x84
+#define THS_SUN8I_DATA2		0x88
+
+#define THS_SUN8I_CTRL0_SENSOR_ACQ0(x)		(x)
+#define THS_SUN8I_CTRL2_SENSE_EN0		BIT(0)
+#define THS_SUN8I_CTRL2_SENSE_EN1		BIT(1)
+#define THS_SUN8I_CTRL2_SENSE_EN2		BIT(2)
+#define THS_SUN8I_CTRL2_SENSOR_ACQ1(x)		((x) << 16)
+#define THS_SUN8I_INT_CTRL_DATA0_IRQ_EN		BIT(8)
+#define THS_SUN8I_INT_CTRL_DATA1_IRQ_EN		BIT(9)
+#define THS_SUN8I_INT_CTRL_DATA2_IRQ_EN		BIT(10)
+#define THS_SUN8I_INT_CTRL_THERMAL_PER(x)	((x) << 12)
+#define THS_SUN8I_STAT_DATA0_IRQ_STS		BIT(8)
+#define THS_SUN8I_STAT_DATA1_IRQ_STS		BIT(9)
+#define THS_SUN8I_STAT_DATA2_IRQ_STS		BIT(10)
+#define THS_SUN8I_STAT_CLEAR			0x777
+#define THS_SUN8I_FILTER_TYPE(x)		((x) << 0)
+#define THS_SUN8I_FILTER_EN			BIT(2)
+
+#define THS_SUN8I_CLK_IN		40000000 /* Hz */
+#define THS_SUN8I_DATA_PERIOD		330 /* ms */
+#define THS_SUN8I_FILTER_TYPE_VALUE	2 /* average over 2^(n+1) samples */
+
+//XXX: this formula doesn't work for A83T very well
+//XXX: A83T is getting slower readings out of this (1s interval?)
+//perhaps configure this in sun8i_ths_desc
+#define THS_SUN8I_FILTER_DIV		(1 << (THS_SUN8I_FILTER_TYPE_VALUE + 1))
+#define THS_SUN8I_INT_CTRL_THERMAL_PER_VALUE \
+	(THS_SUN8I_DATA_PERIOD * (THS_SUN8I_CLK_IN / 1000) / \
+	 THS_SUN8I_FILTER_DIV / 4096 - 1)
+
+#define THS_SUN8I_CTRL0_SENSOR_ACQ0_VALUE	0x3f /* 16us */
+#define THS_SUN8I_CTRL2_SENSOR_ACQ1_VALUE	0x3f
+
+#define SUN8I_THS_MAX_TZDS 3
+
+struct sun8i_ths_sensor_desc {
+	u32 data_int_en;
+	u32 data_int_flag;
+	u32 data_offset;
+	u32 sense_en;
+};
+
+struct sun8i_ths_desc {
+	int num_sensors;
+	struct sun8i_ths_sensor_desc *sensors;
+	int (*calc_temp)(u32 reg_val);
+	bool has_cal1;
+};
+
+struct sun8i_ths_tzd {
+	struct sun8i_ths_data *data;
+	struct thermal_zone_device *tzd;
+	u32 temp;
+};
+
+struct sun8i_ths_data {
+	struct device *dev;
+	struct reset_control *reset;
+	struct clk *clk;
+	struct clk *busclk;
+	void __iomem *regs;
+	void __iomem *cal_regs;
+	struct sun8i_ths_desc *desc;
+	struct sun8i_ths_tzd tzds[SUN8I_THS_MAX_TZDS];
+};
+
+static int sun8i_ths_calc_temp_h3(u32 reg_val)
+{
+	uint64_t temp = (uint64_t)reg_val * 1000000ll;
+
+        do_div(temp, 8253);
+
+	return 217000 - (int)temp;
+}
+
+static int sun8i_ths_calc_temp_a83t(u32 reg_val)
+{
+	uint64_t temp = (uint64_t)reg_val * 1000000ll;
+
+        do_div(temp, 14186);
+
+	return 192000 - (int)temp;
+}
+
+static int sun8i_ths_get_temp(void *_data, int *out)
+{
+	struct sun8i_ths_tzd *tzd = _data;
+	struct sun8i_ths_data *data = tzd->data;
+
+	if (tzd->temp == 0)
+		return -EBUSY;
+
+	*out = data->desc->calc_temp(tzd->temp);
+	return 0;
+}
+
+static irqreturn_t sun8i_ths_irq_thread(int irq, void *_data)
+{
+	struct sun8i_ths_data *data = _data;
+	struct sun8i_ths_tzd *tzd;
+	struct sun8i_ths_sensor_desc *zdesc;
+	int i;
+	u32 status;
+
+	status = readl(data->regs + THS_SUN8I_STAT);
+	writel(THS_SUN8I_STAT_CLEAR, data->regs + THS_SUN8I_STAT);
+
+	for (i = 0; i < data->desc->num_sensors; i++) {
+		tzd = &data->tzds[i];
+		zdesc = &data->desc->sensors[i];
+
+		if (status & zdesc->data_int_flag) {
+			tzd->temp = readl(data->regs + zdesc->data_offset);
+			if (tzd->temp)
+				thermal_zone_device_update(tzd->tzd,
+							   THERMAL_EVENT_TEMP_SAMPLE);
+		}
+	}
+
+	return IRQ_HANDLED;
+}
+
+static void sun8i_ths_init(struct sun8i_ths_data *data)
+{
+	int i;
+	u32 int_ctrl = 0;
+	u32 ctrl2 = 0;
+
+	writel(THS_SUN8I_CTRL0_SENSOR_ACQ0(THS_SUN8I_CTRL0_SENSOR_ACQ0_VALUE),
+		data->regs + THS_SUN8I_CTRL0);
+	writel(THS_SUN8I_FILTER_EN | THS_SUN8I_FILTER_TYPE(THS_SUN8I_FILTER_TYPE_VALUE),
+		data->regs + THS_SUN8I_FILTER);
+
+	ctrl2 |= THS_SUN8I_CTRL2_SENSOR_ACQ1(THS_SUN8I_CTRL2_SENSOR_ACQ1_VALUE);
+	int_ctrl |= THS_SUN8I_INT_CTRL_THERMAL_PER(THS_SUN8I_INT_CTRL_THERMAL_PER_VALUE);
+
+	for (i = 0; i < data->desc->num_sensors; i++) {
+		ctrl2 |= data->desc->sensors[i].sense_en;
+		int_ctrl |= data->desc->sensors[i].data_int_en;
+	}
+
+	if (data->cal_regs) {
+		u32 cal0, cal1;
+
+		cal0 = readl(data->cal_regs);
+		if (cal0)
+			writel(cal0, data->regs + THS_SUN8I_CDATA01);
+
+		if (data->desc->has_cal1) {
+			cal1 = readl(data->cal_regs + 4);
+			if (cal1)
+				writel(cal1, data->regs + THS_SUN8I_CDATA2);
+		}
+	}
+
+	writel(ctrl2, data->regs + THS_SUN8I_CTRL2);
+
+	/* enable interrupts */
+	writel(int_ctrl, data->regs + THS_SUN8I_INT_CTRL);
+}
+
+static const struct thermal_zone_of_device_ops sun8i_ths_thermal_ops = {
+	.get_temp = sun8i_ths_get_temp,
+};
+
+static int sun8i_ths_probe(struct platform_device *pdev)
+{
+	struct sun8i_ths_data *data;
+	struct device *dev = &pdev->dev;
+	struct resource *res;
+	int ret, irq, i;
+
+	data = devm_kzalloc(dev, sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	data->desc = (struct sun8i_ths_desc *)of_device_get_match_data(dev);
+	if (data->desc == NULL)
+		return -EINVAL;
+
+	data->dev = dev;
+	platform_set_drvdata(pdev, data);
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "ths");
+        if (!res) {
+                dev_err(dev, "no memory resources defined\n");
+                return -EINVAL;
+        }
+
+	data->regs = devm_ioremap_resource(dev, res);
+	if (IS_ERR(data->regs)) {
+		ret = PTR_ERR(data->regs);
+		dev_err(dev, "failed to ioremap THS registers: %d\n", ret);
+		return ret;
+	}
+
+	/*XXX: use SRAM device in the future, instead of direct access to regs */
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "calibration");
+        if (res) {
+		data->cal_regs = devm_ioremap_resource(dev, res);
+		if (IS_ERR(data->cal_regs)) {
+			ret = PTR_ERR(data->cal_regs);
+			dev_err(dev, "failed to ioremap calibration SRAM: %d\n", ret);
+			return ret;
+		}
+        }
+
+	irq = platform_get_irq(pdev, 0);
+	if (irq < 0) {
+		dev_err(dev, "failed to get IRQ: %d\n", irq);
+		return irq;
+	}
+
+	ret = devm_request_threaded_irq(dev, irq, NULL,
+					sun8i_ths_irq_thread, IRQF_ONESHOT,
+					dev_name(dev), data);
+	if (ret)
+		return ret;
+
+	data->busclk = devm_clk_get(dev, "ahb");
+	if (IS_ERR(data->busclk)) {
+		ret = PTR_ERR(data->busclk);
+		if (ret != -ENOENT) {
+			dev_err(dev, "failed to get ahb clk: %d\n", ret);
+			return ret;
+		}
+
+		data->busclk = NULL;
+	}
+
+	data->clk = devm_clk_get(dev, "ths");
+	if (IS_ERR(data->clk)) {
+		ret = PTR_ERR(data->clk);
+		if (ret != -ENOENT) {
+			dev_err(dev, "failed to get ths clk: %d\n", ret);
+			return ret;
+		}
+
+		data->clk = NULL;
+	}
+
+	data->reset = devm_reset_control_get_optional(dev, "ahb");
+	if (IS_ERR(data->reset)) {
+		ret = PTR_ERR(data->reset);
+		dev_err(dev, "failed to get reset: %d\n", ret);
+		return ret;
+	}
+
+	ret = reset_control_deassert(data->reset);
+	if (ret) {
+		dev_err(dev, "reset deassert failed: %d\n", ret);
+		return ret;
+	}
+
+	if (data->busclk) {
+		ret = clk_prepare_enable(data->busclk);
+		if (ret) {
+			dev_err(dev, "failed to enable bus clk: %d\n", ret);
+			goto err_assert_reset;
+		}
+	}
+
+	if (data->clk) {
+		ret = clk_prepare_enable(data->clk);
+		if (ret) {
+			dev_err(dev, "failed to enable ths clk: %d\n", ret);
+			goto err_disable_bus;
+		}
+
+		ret = clk_set_rate(data->clk, THS_SUN8I_CLK_IN);
+		if (ret)
+			goto err_disable_ths;
+	}
+
+	for (i = 0; i < data->desc->num_sensors; i++) {
+		data->tzds[i].data = data;
+		data->tzds[i].tzd =
+			devm_thermal_zone_of_sensor_register(dev, i,
+							     &data->tzds[i],
+							     &sun8i_ths_thermal_ops);
+		if (IS_ERR(data->tzds[i].tzd)) {
+			ret = PTR_ERR(data->tzds[i].tzd);
+			dev_err(dev,
+				"failed to register thermal zone: %d\n", ret);
+			goto err_disable_ths;
+		}
+	}
+
+	sun8i_ths_init(data);
+	return 0;
+
+err_disable_ths:
+	if (data->clk)
+		clk_disable_unprepare(data->clk);
+err_disable_bus:
+	if (data->busclk)
+		clk_disable_unprepare(data->busclk);
+err_assert_reset:
+	reset_control_assert(data->reset);
+	return ret;
+}
+
+static int sun8i_ths_remove(struct platform_device *pdev)
+{
+	struct sun8i_ths_data *data = platform_get_drvdata(pdev);
+
+	reset_control_assert(data->reset);
+	if (data->clk)
+		clk_disable_unprepare(data->clk);
+	if (data->busclk)
+		clk_disable_unprepare(data->busclk);
+	return 0;
+}
+
+struct sun8i_ths_sensor_desc sun8i_ths_h3_sensors[] = {
+	{
+		.data_int_en = THS_SUN8I_INT_CTRL_DATA0_IRQ_EN,
+		.data_int_flag = THS_SUN8I_STAT_DATA0_IRQ_STS,
+		.data_offset = THS_SUN8I_DATA0,
+		.sense_en = THS_SUN8I_CTRL2_SENSE_EN0,
+	},
+};
+
+struct sun8i_ths_sensor_desc sun8i_ths_a83t_sensors[] = {
+	{
+		.data_int_en = THS_SUN8I_INT_CTRL_DATA0_IRQ_EN,
+		.data_int_flag = THS_SUN8I_STAT_DATA0_IRQ_STS,
+		.data_offset = THS_SUN8I_DATA0,
+		.sense_en = THS_SUN8I_CTRL2_SENSE_EN0,
+	},
+	{
+		.data_int_en = THS_SUN8I_INT_CTRL_DATA1_IRQ_EN,
+		.data_int_flag = THS_SUN8I_STAT_DATA1_IRQ_STS,
+		.data_offset = THS_SUN8I_DATA1,
+		.sense_en = THS_SUN8I_CTRL2_SENSE_EN1,
+	},
+	{
+		.data_int_en = THS_SUN8I_INT_CTRL_DATA2_IRQ_EN,
+		.data_int_flag = THS_SUN8I_STAT_DATA2_IRQ_STS,
+		.data_offset = THS_SUN8I_DATA2,
+		.sense_en = THS_SUN8I_CTRL2_SENSE_EN2,
+	},
+};
+
+static const struct sun8i_ths_desc sun8i_ths_h3_desc = {
+	.num_sensors = ARRAY_SIZE(sun8i_ths_h3_sensors),
+	.sensors = sun8i_ths_h3_sensors,
+	.calc_temp = sun8i_ths_calc_temp_h3,
+	.has_cal1 = false,
+};
+
+static const struct sun8i_ths_desc sun8i_ths_a83t_desc = {
+	.num_sensors = ARRAY_SIZE(sun8i_ths_a83t_sensors),
+	.sensors = sun8i_ths_a83t_sensors,
+	.calc_temp = sun8i_ths_calc_temp_a83t,
+	.has_cal1 = true,
+};
+
+static const struct of_device_id sun8i_ths_id_table[] = {
+	{ .compatible = "allwinner,sun8i-h3-ths", .data = &sun8i_ths_h3_desc },
+	{ .compatible = "allwinner,sun8i-a83t-ths", .data = &sun8i_ths_a83t_desc },
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(of, sun8i_ths_id_table);
+
+static struct platform_driver sun8i_ths_driver = {
+	.probe = sun8i_ths_probe,
+	.remove = sun8i_ths_remove,
+	.driver = {
+		.name = "sun8i_ths",
+		.of_match_table = sun8i_ths_id_table,
+	},
+};
+
+module_platform_driver(sun8i_ths_driver);
+
+MODULE_AUTHOR("Ond≈ôej Jirman <megous@megous.com>");
+MODULE_DESCRIPTION("Thermal sensor driver for Allwinner SUN8I SoCs");
+MODULE_LICENSE("GPL v2");
